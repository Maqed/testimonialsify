// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime? @updatedAt
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    tier          Tier      @relation(fields: [tierId], references: [id])
    tierId        String    @default("free")
    projects      Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tier {
    id              String  @id @default("free")
    name            String  @unique
    maxProjects     Int
    maxTextReviews  Int
    maxVideoReviews Int
    isCustom        Boolean @default(false)
    users           User[]

    @@map("tiers")
}

model Project {
    id           String        @id @default(uuid())
    name         String
    user         User          @relation(fields: [userId], references: [id])
    userId       String
    textReviews  TextReview[]
    videoReviews VideoReview[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model TextReview {
    id        String   @id @default(uuid())
    content   String
    project   Project  @relation(fields: [projectId], references: [id])
    projectId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VideoReview {
    id        String   @id @default(uuid())
    videoUrl  String
    project   Project  @relation(fields: [projectId], references: [id])
    projectId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
